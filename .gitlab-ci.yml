include:
  - component: gitlab.gnome.org/GNOME/citemplates/release-service@master
    inputs:
      dist-job-name: "dist-job"
      tarball-artifact-path: "${TARBALL_ARTIFACT_PATH}"

stages:
  - style-check
  - build
  - coverage
  - analysis
  - deploy
  - report

cache:
  paths:
    - _ccache/

variables:
  FEDORA_IMAGE: "registry.gitlab.gnome.org/gnome/glib/fedora:v39.5"
  COVERITY_IMAGE: "registry.gitlab.gnome.org/gnome/glib/coverity:v7"
  DEBIAN_IMAGE: "registry.gitlab.gnome.org/gnome/glib/debian-stable:v23"
  DEBIAN_I386_IMAGE: "registry.gitlab.gnome.org/gnome/glib/debian-stable-i386:v3"
  ALPINE_IMAGE: "registry.gitlab.gnome.org/gnome/glib/alpine:v7"
  MINGW_IMAGE: "registry.gitlab.gnome.org/gnome/glib/mingw:v39.5"
  GOBJECT_INTROSPECTION_TAG: "1.80.1"
  MESON_TEST_TIMEOUT_MULTIPLIER: 4
  G_MESSAGES_DEBUG: all
  MESON_COMMON_OPTIONS: "--buildtype debug --wrap-mode=nodownload --fatal-meson-warnings"
  # expected naming scheme for the release-service job
  TARBALL_ARTIFACT_PATH: "_build/meson-dist/${CI_PROJECT_NAME}-${CI_COMMIT_TAG}.tar.xz"

# Default CI job setup; contrast with `.only-origin`.
#
# Don’t execute the pipeline when a merge request is merged into `origin/main`,
# as it will have already been tested
.only-default:
  only:
    - branches
  except:
    refs:
      - tags
    variables:
      - $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PROJECT_NAMESPACE == "GNOME"

# As above, but does get executed on merge into `origin/main`. For use with
# updating code coverage results and docs builds.
.only-default-and-merges:
  only:
    - branches
  except:
    refs:
      - tags

# Some jobs run on CI runners which don’t have good isolation between CI jobs,
# and don’t have much available resource. Limit those jobs to only ones on the
# origin repository (GNOME/glib), rather than people’s forks. Code in the origin
# repository can be trusted.
.only-origin:
  only:
    - branches@GNOME/glib
  except:
    - tags

# Some jobs take a long time and are unlikely to find failures (or will find
# failures which are not merge-blockers to fix), so they’re executed on a weekly
# schedule in order to save CI resources and speed up branch pipelines.
.only-schedules:
  only:
    - schedules
  except:
    - tags

# Some jobs take a long time and are unlikely to find failures (or will find
# failures which are not merge-blockers to fix), so they’re executed on a weekly
# schedule in order to save CI resources and speed up branch pipelines.
# But for specific merge requests, one may still want to run them, so make
# possible to run them manually.
.only-schedules-or-manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    # As per rule before, the following rules will only apply to non MR events
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      allow_failure: true

# Some jobs should be runnable only on schedules and when triggered by a branch
# in the origin repository, but without
.only-schedules-or-manual-in-default-branch:
  rules:
    - if: $CI_PROJECT_PATH != "GNOME/glib" || $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: never
    # As per rule before, the following rules will apply only to GNOME/glib:main
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE != "schedule"
      when: manual
      allow_failure: true

# Some jobs run on CI runners don’t have much available resource.
# Limit those jobs to only ones on the origin repository (GNOME/glib),
# rather than people’s forks or if ran manually.
.only-origin-or-manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_PROJECT_NAMESPACE == "GNOME"
      when: always
    - if: $CI_PROJECT_NAMESPACE != "GNOME"
      when: manual
      allow_failure: true

.build-gobject-introspection:
  before_script:
    # If the CI image doesn’t provide a new enough gobject-introspection
    # package, build it ourselves.
    # See https://gitlab.gnome.org/GNOME/glib/-/merge_requests/3746#note_2161354
    - >
      if ! pkg-config --atleast-version "${GOBJECT_INTROSPECTION_TAG}" gobject-introspection-1.0; then
        mkdir -p gobject-introspection
        git clone --branch "${GOBJECT_INTROSPECTION_TAG}" https://gitlab.gnome.org/GNOME/gobject-introspection.git gobject-introspection
        meson gobject-introspection gobject-introspection/build --prefix=/usr
        sudo meson install -C gobject-introspection/build
      fi
  artifacts:
    expire_in: 3 days
    paths:
      - gobject-introspection

.build-linux:
  before_script:
    - bash .gitlab-ci/show-execution-environment.sh
    - cp -r "${HOME}"/subprojects/* subprojects/

# FIXME: Work around https://gitlab.com/gitlab-org/gitlab/-/issues/391756
.with-git:
  before_script:
   - rm -rf subprojects/gvdb
   - git config --global --add safe.directory "${PWD}"
   - git submodule update --init --depth 1
  variables:
    GIT_SUBMODULE_STRATEGY: "none"
    GIT_SUBMODULE_DEPTH: 1



style-check-mandatory:
  extends:
    - .only-default
    - .with-git
  image: "${DEBIAN_IMAGE}"
  stage: style-check
  allow_failure: false
  script:
    - tests/reuse.sh
  variables:
    LINT_WARNINGS_ARE_ERRORS: '1'

fedora-x86_64:
  extends:
    - .build-gobject-introspection
    - .build-linux
    - .only-default-and-merges
    - .with-git
  image: "${FEDORA_IMAGE}"
  stage: build
  needs: []
  variables:
    CFLAGS: "--coverage -ftest-coverage -fprofile-arcs -fprofile-update=atomic"
    CXXFLAGS: "--coverage -ftest-coverage -fprofile-arcs -fprofile-update=atomic"
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".with-git", "before_script"]
    - !reference [".build-gobject-introspection", "before_script"]
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --default-library=both
            --prefix="${HOME}/glib-installed"
            --localstatedir=/var
            --libdir=lib
            -Dsystemtap=enabled
            -Ddtrace=enabled
            -Dinstalled_tests=true
            -Ddocumentation=true
            -Dintrospection=enabled
            -Dman-pages=enabled
            _build
    - meson compile -C _build
    - mkdir -p _coverage
    - lcov --config-file .lcovrc --directory _build --capture --initial
      --output-file "_coverage/${CI_JOB_NAME}-baseline.lcov"
    - .gitlab-ci/run-tests.sh
    - lcov --config-file .lcovrc --directory _build --capture
      --output-file "_coverage/${CI_JOB_NAME}.lcov"
    # Copy the built documentation to an artifact directory. The build for docs.gtk.org
    # can then pull it from there — see https://gitlab.gnome.org/GNOME/gtk/-/blob/docs-gtk-org/README.md
    - mkdir -p _reference/
    - mv _build/docs/reference/glib/glib-2.0/ _reference/glib/
    - mv _build/docs/reference/glib/glib-unix-2.0/ _reference/glib-unix/
    - mv _build/docs/reference/gmodule/gmodule-2.0/ _reference/gmodule/
    - mv _build/docs/reference/gobject/gobject-2.0/ _reference/gobject/
    - mv _build/docs/reference/gio/gio-2.0/ _reference/gio/
    - mv _build/docs/reference/gio/gio-unix-2.0/ _reference/gio-unix/
    - mv _build/docs/reference/girepository/girepository-2.0/ _reference/girepository/
  artifacts:
    reports:
      junit:
        - _build/meson-logs/testlog.junit.xml
        - _build/meson-logs/testlog-*.junit.xml
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "_build/config.h"
      - "_build/glib/glibconfig.h"
      - "_build/meson-logs"
      - "_coverage"
      - "_reference"

.build-debian:
  extends:
    - .build-linux
    - .with-git
  stage: build
  needs: []
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".with-git", "before_script"]
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --default-library=both
            --prefix="${HOME}/glib-installed"
            --localstatedir=/var
            --libdir=lib
            -Dsystemtap=enabled
            -Ddtrace=enabled
            _build
    - meson compile -C _build
    - .gitlab-ci/run-tests.sh
  artifacts:
    reports:
      junit:
        - _build/meson-logs/testlog.junit.xml
        - _build/meson-logs/testlog-*.junit.xml
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "_build/config.h"
      - "_build/glib/glibconfig.h"
      - "_build/meson-logs"

debian-stable-x86_64:
  extends:
    - .build-debian
    # We don't need to run this job too often, because the combination of
    # fedora-x86_64 and debian-stable-i386 should cover more or less
    # everything that this job does
    - .only-schedules-or-manual
  image: "${DEBIAN_IMAGE}"

debian-stable-i386:
  extends:
    - .build-debian
    - .only-default
  image: "${DEBIAN_I386_IMAGE}"

hurd-i386:
  extends:
    - .only-schedules-or-manual
    - .with-git
  stage: build
  tags:
    - hurd
  needs: []
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --default-library=both
            --prefix="${HOME}/glib-installed"
            --localstatedir=/var
            --libdir=lib
            _build
    - meson compile -C _build
    - .gitlab-ci/run-tests.sh
  artifacts:
    reports:
      junit:
        - _build/meson-logs/testlog.junit.xml
        - _build/meson-logs/testlog-*.junit.xml
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "_build/config.h"
      - "_build/glib/glibconfig.h"
      - "_build/meson-logs"


installed-tests:
  extends:
    - .build-linux
    - .only-schedules-or-manual
    - .with-git
    - .build-gobject-introspection
  image: "${FEDORA_IMAGE}"
  stage: build
  needs: []
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".with-git", "before_script"]
    - !reference [".build-gobject-introspection", "before_script"]
  script:
    # dtrace is disabled because it breaks the static-link.py test
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --prefix=/usr --libdir=/usr/lib64
            -Dinstalled_tests=true
            -Ddefault_library=both
            -Ddtrace=disabled
            -Dintrospection=enabled
            _build
    - meson compile -C _build
    - sudo meson install -C _build
    # Remove old headers, possibly present in current installation
    - sudo rm -f /usr/include/glib-2.0/glib/gurifuncs.h
    - sudo chown -R `id -un`:`id -gn` _build/
    # Work-around https://gitlab.gnome.org/GNOME/gnome-desktop-testing/merge_requests/2
    - mkdir -p _build/installed-tests-report/logs/
    - GLIB_TEST_COMPILATION=1 gnome-desktop-testing-runner
            --report-directory=_build/installed-tests-report/failed/
            --log-directory=_build/installed-tests-report/logs/
            --parallel=0
            glib
  artifacts:
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "_build/config.h"
      - "_build/glib/glibconfig.h"
      - "_build/meson-logs"
      - "_build/installed-tests-report/"



coverage:
  extends: .only-default
  image: "${FEDORA_IMAGE}"
  stage: coverage
  needs: ['fedora-x86_64', 'msys2-mingw32']
  artifacts:
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    expire_in: 1 week
    expose_as: 'Coverage Report'
    paths:
      - _coverage/coverage/index.html
      - _coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: _coverage/*-cobertura/cobertura-*.xml
  before_script:
    - bash .gitlab-ci/show-execution-environment.sh
  script:
    - bash -x ./.gitlab-ci/coverage-docker.sh
  coverage: '/^\s+lines\.+:\s+([\d.]+\%)\s+/'

scan-build:
  extends:
    - .build-linux
    - .only-schedules-or-manual
    - .build-gobject-introspection
  image: "${FEDORA_IMAGE}"
  stage: analysis
  needs: []
  variables:
    # FIXME: Eventually we want static analysis on the tests and copylibs, for
    # code quality, but for the moment it’s just busywork.
    # FIXME: Disable the dead code checkers for now because they create a lot of
    # noise and don’t indicate high severity problems.
    SCAN_BUILD_FLAGS: >-
      --exclude gio/tests/
      --exclude girepository/tests/
      --exclude glib/tests/
      --exclude gmodule/tests/
      --exclude gobject/tests/
      --exclude gthread/tests/
      --exclude girepository/cmph/
      --exclude glib/libcharset/
      --exclude gio/xdgmime/
      --exclude meson-private/
      -disable-checker deadcode.DeadStores
      --status-bugs
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".build-gobject-introspection", "before_script"]
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --default-library=both
            --prefix="${HOME}/glib-installed"
            --localstatedir=/var
            --libdir=lib
            -Dglib_debug=enabled
            -Dsystemtap=enabled
            -Ddtrace=enabled
            -Dinstalled_tests=true
            -Dintrospection=enabled
            _scan_build
    - SCANBUILD="$(pwd)/.gitlab-ci/scan-build.sh" ninja -C _scan_build scan-build
  artifacts:
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "_scan_build/meson-logs/scanbuild"

.coverity:
  extends:
    - .build-linux
    - .only-schedules-or-manual-in-default-branch
    - .build-gobject-introspection
  image: "${COVERITY_IMAGE}"
  stage: analysis
  needs: []
  variables:
    # cov-build doesn’t like GLIB_DEPRECATED_ENUMERATOR
    CFLAGS: '-DGLIB_DISABLE_DEPRECATION_WARNINGS'
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".build-gobject-introspection", "before_script"]
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --werror
            --default-library=both
            --prefix="${HOME}/glib-installed"
            --localstatedir=/var
            --libdir=lib
            -Dsystemtap=enabled
            -Ddtrace=enabled
            -Dinstalled_tests=true
            -Dintrospection=enabled
            _coverity_build
    # true is needed to fix GitLab having trouble parsing the quotes
    - true && "${HOME}"/cov-analysis-linux64-*/bin/cov-build --dir cov-int meson compile -C _coverity_build
    - tar cfz cov-int.tar.gz cov-int
    - curl "https://scan.coverity.com/builds?project=${COVERITY_SCAN_PROJECT_NAME}"
           --form token="${COVERITY_SCAN_TOKEN}" --form email="${GITLAB_USER_EMAIL}"
           --form file=@cov-int.tar.gz --form version="${CI_COMMIT_SHA}"
           --form description="${CI_COMMIT_SHA} / ${CI_COMMIT_TITLE} / ${CI_COMMIT_REF_NAME}:${CI_PIPELINE_ID}"
  artifacts:
    name: "glib-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - "cov-int/build-log.txt"

pages:
  extends: .only-schedules
  stage: deploy
  needs: ['coverage', 'style-check-advisory']
  script:
    - mv _coverage/ public/
  artifacts:
    paths:
      - public

dist-job:
  extends:
    - .build-gobject-introspection
    - .build-linux
    - .with-git
  image: "${FEDORA_IMAGE}"
  stage: build
  needs: []
  before_script:
    - !reference [".build-linux", "before_script"]
    - !reference [".with-git", "before_script"]
    - !reference [".build-gobject-introspection", "before_script"]
  only:
    - schedules
    - tags
  script:
    - meson setup ${MESON_COMMON_OPTIONS}
            --buildtype release
            -Ddocumentation=true
            -Dintrospection=enabled
            -Dman-pages=enabled
            _build
    - meson dist -C _build
    # Compile again to build the docs
    - meson compile -C _build
    - tar -c -J -f "_build/glib-docs-${CI_COMMIT_TAG}.tar.xz" -C _build/docs/reference/glib glib-2.0
    - tar -c -J -f "_build/gmodule-docs-${CI_COMMIT_TAG}.tar.xz" -C _build/docs/reference/gmodule gmodule-2.0
    - tar -c -J -f "_build/gobject-docs-${CI_COMMIT_TAG}.tar.xz" -C _build/docs/reference/gobject gobject-2.0
    - tar -c -J -f "_build/gio-docs-${CI_COMMIT_TAG}.tar.xz" -C _build/docs/reference/gio gio-2.0
    - tar -c -J -f "_build/girepository-docs-${CI_COMMIT_TAG}.tar.xz" -C _build/docs/reference/girepository girepository-2.0
  artifacts:
    paths:
      - "${CI_PROJECT_DIR}/_build/glib-docs-${CI_COMMIT_TAG}.tar.xz"
      - "${CI_PROJECT_DIR}/_build/gmodule-docs-${CI_COMMIT_TAG}.tar.xz"
      - "${CI_PROJECT_DIR}/_build/gobject-docs-${CI_COMMIT_TAG}.tar.xz"
      - "${CI_PROJECT_DIR}/_build/gio-docs-${CI_COMMIT_TAG}.tar.xz"
      - "${CI_PROJECT_DIR}/_build/girepository-docs-${CI_COMMIT_TAG}.tar.xz"
      - "${CI_PROJECT_DIR}/_build/meson-dist/glib-*.tar.xz"


